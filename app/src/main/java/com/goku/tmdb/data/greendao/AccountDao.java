package com.goku.tmdb.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.goku.tmdb.data.entity.Account.Avatar;
import com.goku.tmdb.db.TmdbConverter.AvatarConverter;

import com.goku.tmdb.data.entity.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Avatar = new Property(0, String.class, "avatar", false, "AVATAR");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Iso6391 = new Property(2, String.class, "iso6391", false, "ISO6391");
        public final static Property Iso31661 = new Property(3, String.class, "iso31661", false, "ISO31661");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property IncludeAdult = new Property(5, Boolean.class, "includeAdult", false, "INCLUDE_ADULT");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
    }

    private final AvatarConverter avatarConverter = new AvatarConverter();

    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"AVATAR\" TEXT," + // 0: avatar
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: id
                "\"ISO6391\" TEXT," + // 2: iso6391
                "\"ISO31661\" TEXT," + // 3: iso31661
                "\"NAME\" TEXT," + // 4: name
                "\"INCLUDE_ADULT\" INTEGER," + // 5: includeAdult
                "\"USERNAME\" TEXT);"); // 6: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Avatar avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(1, avatarConverter.convertToDatabaseValue(avatar));
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String iso6391 = entity.getIso6391();
        if (iso6391 != null) {
            stmt.bindString(3, iso6391);
        }
 
        String iso31661 = entity.getIso31661();
        if (iso31661 != null) {
            stmt.bindString(4, iso31661);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Boolean includeAdult = entity.getIncludeAdult();
        if (includeAdult != null) {
            stmt.bindLong(6, includeAdult ? 1L: 0L);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Avatar avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(1, avatarConverter.convertToDatabaseValue(avatar));
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String iso6391 = entity.getIso6391();
        if (iso6391 != null) {
            stmt.bindString(3, iso6391);
        }
 
        String iso31661 = entity.getIso31661();
        if (iso31661 != null) {
            stmt.bindString(4, iso31661);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Boolean includeAdult = entity.getIncludeAdult();
        if (includeAdult != null) {
            stmt.bindLong(6, includeAdult ? 1L: 0L);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : avatarConverter.convertToEntityProperty(cursor.getString(offset + 0)), // avatar
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iso6391
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // iso31661
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // includeAdult
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setAvatar(cursor.isNull(offset + 0) ? null : avatarConverter.convertToEntityProperty(cursor.getString(offset + 0)));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIso6391(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIso31661(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIncludeAdult(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
