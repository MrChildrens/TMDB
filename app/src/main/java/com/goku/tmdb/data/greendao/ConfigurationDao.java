package com.goku.tmdb.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.goku.tmdb.data.entity.configuration.Configuration.Images;
import com.goku.tmdb.db.TmdbConverter.CountryConverter;
import com.goku.tmdb.db.TmdbConverter.ImagesConverter;
import com.goku.tmdb.db.TmdbConverter.JobsConverter;
import com.goku.tmdb.db.TmdbConverter.LanguagesConverter;
import com.goku.tmdb.db.TmdbConverter.TimezonesConverter;
import java.util.List;

import com.goku.tmdb.data.entity.configuration.Configuration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Images = new Property(1, String.class, "images", false, "IMAGES");
        public final static Property MCountries = new Property(2, String.class, "mCountries", false, "M_COUNTRIES");
        public final static Property MLanguages = new Property(3, String.class, "mLanguages", false, "M_LANGUAGES");
        public final static Property MJobs = new Property(4, String.class, "mJobs", false, "M_JOBS");
        public final static Property MTimezones = new Property(5, String.class, "mTimezones", false, "M_TIMEZONES");
    }

    private final ImagesConverter imagesConverter = new ImagesConverter();
    private final CountryConverter mCountriesConverter = new CountryConverter();
    private final LanguagesConverter mLanguagesConverter = new LanguagesConverter();
    private final JobsConverter mJobsConverter = new JobsConverter();
    private final TimezonesConverter mTimezonesConverter = new TimezonesConverter();

    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"IMAGES\" TEXT," + // 1: images
                "\"M_COUNTRIES\" TEXT," + // 2: mCountries
                "\"M_LANGUAGES\" TEXT," + // 3: mLanguages
                "\"M_JOBS\" TEXT," + // 4: mJobs
                "\"M_TIMEZONES\" TEXT);"); // 5: mTimezones
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Configuration entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Images images = entity.getImages();
        if (images != null) {
            stmt.bindString(2, imagesConverter.convertToDatabaseValue(images));
        }
 
        List mCountries = entity.getMCountries();
        if (mCountries != null) {
            stmt.bindString(3, mCountriesConverter.convertToDatabaseValue(mCountries));
        }
 
        List mLanguages = entity.getMLanguages();
        if (mLanguages != null) {
            stmt.bindString(4, mLanguagesConverter.convertToDatabaseValue(mLanguages));
        }
 
        List mJobs = entity.getMJobs();
        if (mJobs != null) {
            stmt.bindString(5, mJobsConverter.convertToDatabaseValue(mJobs));
        }
 
        List mTimezones = entity.getMTimezones();
        if (mTimezones != null) {
            stmt.bindString(6, mTimezonesConverter.convertToDatabaseValue(mTimezones));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Images images = entity.getImages();
        if (images != null) {
            stmt.bindString(2, imagesConverter.convertToDatabaseValue(images));
        }
 
        List mCountries = entity.getMCountries();
        if (mCountries != null) {
            stmt.bindString(3, mCountriesConverter.convertToDatabaseValue(mCountries));
        }
 
        List mLanguages = entity.getMLanguages();
        if (mLanguages != null) {
            stmt.bindString(4, mLanguagesConverter.convertToDatabaseValue(mLanguages));
        }
 
        List mJobs = entity.getMJobs();
        if (mJobs != null) {
            stmt.bindString(5, mJobsConverter.convertToDatabaseValue(mJobs));
        }
 
        List mTimezones = entity.getMTimezones();
        if (mTimezones != null) {
            stmt.bindString(6, mTimezonesConverter.convertToDatabaseValue(mTimezones));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 1)), // images
            cursor.isNull(offset + 2) ? null : mCountriesConverter.convertToEntityProperty(cursor.getString(offset + 2)), // mCountries
            cursor.isNull(offset + 3) ? null : mLanguagesConverter.convertToEntityProperty(cursor.getString(offset + 3)), // mLanguages
            cursor.isNull(offset + 4) ? null : mJobsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // mJobs
            cursor.isNull(offset + 5) ? null : mTimezonesConverter.convertToEntityProperty(cursor.getString(offset + 5)) // mTimezones
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImages(cursor.isNull(offset + 1) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setMCountries(cursor.isNull(offset + 2) ? null : mCountriesConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setMLanguages(cursor.isNull(offset + 3) ? null : mLanguagesConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setMJobs(cursor.isNull(offset + 4) ? null : mJobsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setMTimezones(cursor.isNull(offset + 5) ? null : mTimezonesConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Configuration entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
