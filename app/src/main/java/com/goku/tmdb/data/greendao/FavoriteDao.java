package com.goku.tmdb.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.goku.tmdb.db.TmdbConverter.ListIntegerConverter;
import com.goku.tmdb.db.TmdbConverter.ListStringConverter;
import java.util.List;

import com.goku.tmdb.db.Favorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE".
*/
public class FavoriteDao extends AbstractDao<Favorite, Long> {

    public static final String TABLENAME = "FAVORITE";

    /**
     * Properties of entity Favorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Adult = new Property(1, Boolean.class, "adult", false, "ADULT");
        public final static Property BackdropPath = new Property(2, String.class, "backdropPath", false, "BACKDROP_PATH");
        public final static Property OriginalLanguage = new Property(3, String.class, "originalLanguage", false, "ORIGINAL_LANGUAGE");
        public final static Property OriginalName = new Property(4, String.class, "originalName", false, "ORIGINAL_NAME");
        public final static Property Overview = new Property(5, String.class, "overview", false, "OVERVIEW");
        public final static Property Popularity = new Property(6, Double.class, "popularity", false, "POPULARITY");
        public final static Property PosterPath = new Property(7, String.class, "posterPath", false, "POSTER_PATH");
        public final static Property FirstAirDate = new Property(8, String.class, "firstAirDate", false, "FIRST_AIR_DATE");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property VoteAverage = new Property(10, Double.class, "voteAverage", false, "VOTE_AVERAGE");
        public final static Property VoteCount = new Property(11, Integer.class, "voteCount", false, "VOTE_COUNT");
        public final static Property GenreIds = new Property(12, String.class, "genreIds", false, "GENRE_IDS");
        public final static Property OriginCountry = new Property(13, String.class, "originCountry", false, "ORIGIN_COUNTRY");
        public final static Property AccountId = new Property(14, Long.class, "accountId", false, "ACCOUNT_ID");
        public final static Property Page = new Property(15, int.class, "page", false, "PAGE");
    }

    private final ListIntegerConverter genreIdsConverter = new ListIntegerConverter();
    private final ListStringConverter originCountryConverter = new ListStringConverter();

    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADULT\" INTEGER," + // 1: adult
                "\"BACKDROP_PATH\" TEXT," + // 2: backdropPath
                "\"ORIGINAL_LANGUAGE\" TEXT," + // 3: originalLanguage
                "\"ORIGINAL_NAME\" TEXT," + // 4: originalName
                "\"OVERVIEW\" TEXT," + // 5: overview
                "\"POPULARITY\" REAL," + // 6: popularity
                "\"POSTER_PATH\" TEXT," + // 7: posterPath
                "\"FIRST_AIR_DATE\" TEXT," + // 8: firstAirDate
                "\"NAME\" TEXT," + // 9: name
                "\"VOTE_AVERAGE\" REAL," + // 10: voteAverage
                "\"VOTE_COUNT\" INTEGER," + // 11: voteCount
                "\"GENRE_IDS\" TEXT," + // 12: genreIds
                "\"ORIGIN_COUNTRY\" TEXT," + // 13: originCountry
                "\"ACCOUNT_ID\" INTEGER," + // 14: accountId
                "\"PAGE\" INTEGER NOT NULL );"); // 15: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(2, adult ? 1L: 0L);
        }
 
        String backdropPath = entity.getBackdropPath();
        if (backdropPath != null) {
            stmt.bindString(3, backdropPath);
        }
 
        String originalLanguage = entity.getOriginalLanguage();
        if (originalLanguage != null) {
            stmt.bindString(4, originalLanguage);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(5, originalName);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(6, overview);
        }
 
        Double popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(7, popularity);
        }
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(8, posterPath);
        }
 
        String firstAirDate = entity.getFirstAirDate();
        if (firstAirDate != null) {
            stmt.bindString(9, firstAirDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        Double voteAverage = entity.getVoteAverage();
        if (voteAverage != null) {
            stmt.bindDouble(11, voteAverage);
        }
 
        Integer voteCount = entity.getVoteCount();
        if (voteCount != null) {
            stmt.bindLong(12, voteCount);
        }
 
        List genreIds = entity.getGenreIds();
        if (genreIds != null) {
            stmt.bindString(13, genreIdsConverter.convertToDatabaseValue(genreIds));
        }
 
        List originCountry = entity.getOriginCountry();
        if (originCountry != null) {
            stmt.bindString(14, originCountryConverter.convertToDatabaseValue(originCountry));
        }
 
        Long accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindLong(15, accountId);
        }
        stmt.bindLong(16, entity.getPage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(2, adult ? 1L: 0L);
        }
 
        String backdropPath = entity.getBackdropPath();
        if (backdropPath != null) {
            stmt.bindString(3, backdropPath);
        }
 
        String originalLanguage = entity.getOriginalLanguage();
        if (originalLanguage != null) {
            stmt.bindString(4, originalLanguage);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(5, originalName);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(6, overview);
        }
 
        Double popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(7, popularity);
        }
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(8, posterPath);
        }
 
        String firstAirDate = entity.getFirstAirDate();
        if (firstAirDate != null) {
            stmt.bindString(9, firstAirDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        Double voteAverage = entity.getVoteAverage();
        if (voteAverage != null) {
            stmt.bindDouble(11, voteAverage);
        }
 
        Integer voteCount = entity.getVoteCount();
        if (voteCount != null) {
            stmt.bindLong(12, voteCount);
        }
 
        List genreIds = entity.getGenreIds();
        if (genreIds != null) {
            stmt.bindString(13, genreIdsConverter.convertToDatabaseValue(genreIds));
        }
 
        List originCountry = entity.getOriginCountry();
        if (originCountry != null) {
            stmt.bindString(14, originCountryConverter.convertToDatabaseValue(originCountry));
        }
 
        Long accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindLong(15, accountId);
        }
        stmt.bindLong(16, entity.getPage());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Favorite readEntity(Cursor cursor, int offset) {
        Favorite entity = new Favorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // adult
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // backdropPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // originalLanguage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // originalName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // overview
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // popularity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // posterPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // firstAirDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // voteAverage
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // voteCount
            cursor.isNull(offset + 12) ? null : genreIdsConverter.convertToEntityProperty(cursor.getString(offset + 12)), // genreIds
            cursor.isNull(offset + 13) ? null : originCountryConverter.convertToEntityProperty(cursor.getString(offset + 13)), // originCountry
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // accountId
            cursor.getInt(offset + 15) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Favorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdult(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setBackdropPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOriginalLanguage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOriginalName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOverview(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPopularity(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPosterPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFirstAirDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVoteAverage(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setVoteCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setGenreIds(cursor.isNull(offset + 12) ? null : genreIdsConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setOriginCountry(cursor.isNull(offset + 13) ? null : originCountryConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setAccountId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setPage(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Favorite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Favorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Favorite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
